# Introduction to the HCL library
Or the HashiCorp configuration language (language)
Tags: go, hcl, hcl2

Adrien Delorme
February 2022
adrien@hashicorp.com
https://github.com/azr/hcl_intro

## Some disclaimers

* HCL is currently at version 2 and stable.
* I did not create HCL and I only slightly contribute to HCL.
* I made Packer transition to HCL.

.image scale.png 300 _ 

## I learned HCL along the way.

By looking at other Projects like Terraform or Nomad. 

I don't recommend doing that.

And I really hope this presentation can help you get started.

## HCL is not a data structure serialization language

Like JSON or YAML

## HCL allows to define configuration languages for tools

So it is better to say :
* The Terraform Configuration language
* The Nomad Configuration language
* The Packer Configuration language
* etc.

Applications intending to use HCL should think of it as a language design task
in its own.

I'm going to show how to do this.

## First some basics

## Some vocabulary

HCL files are made of :

 * bodies :

.code body.example.hcl

 * blocks :

.code block.example.hcl

 * arguments :

.code arguments.example.hcl

## Example file

.code complex.example.hcl

## 

.background parse.png

##

.image sequence_diagram.png _ 550

## One way to parse an HCL file

.code recipy.go /ParseConfig/

* diagnostics can contain contextual warnings or errors

## HCL's super powers :

* Partial reads (get block a)
* Variables
* Functions

## Defining the Cooking configuration Language

## Defining the Cooking configuration Language

It displays recipes nicely.

It has 'required version' controls.

I want to be able describe how to:

* `slice` ingredients
* `boil` ingredients.
* stash ingredients together.

And then maybe print the recipe.

## Getting the required recipy version :

.code tartiflette.recipy.hcl /recipy_version/

## Getting the required recipy version :

.code tartiflette.recipy.hcl /recipy_version/
.code recipy.go /recipyVersionSchema/,/}/

This Schema tells what attributes can be present in our body.

## Getting the required recipy version :

.code tartiflette.recipy.hcl /recipy_version/
.code recipy.go /recipyVersionSchema/,/}/
.code recipy.go /versionContent/,/}/

* PartialContent returns a content type that will contain only our attribute.
* rest will contain all remaining blocks yet to decode.

## Getting the required recipy version :

.code tartiflette.recipy.hcl /recipy_version/
.code recipy.go /recipyVersionSchema/,/}/
.code recipy.go /versionContent/,/}/
.code recipy.go /versionContent.Attributes/,/AsString/

## Slicing:

.code tartiflette.recipy.hcl /slice/,/kind/

This is going to create a sliced_cheese variable.

## Slicing:

.code tartiflette.recipy.hcl /slice/,/kind/
.code recipy.go /preparationActionsSchema/,/"slice"/

BodySchema tells what blocks can be present in a body

## Slicing:

.code tartiflette.recipy.hcl /slice/,/kind/
.code recipy.go /preparationActionsSchema/,/"slice"/
.code recipy.go /preparationContent,/

* PartialContent gets the blocks from our schema.
* The rest of the AST is in 'prepRest'.

## Slicing:

.code tartiflette.recipy.hcl /slice/,/kind/
.code recipy.go /preparationActionsSchema/,/"slice"/
.code recipy.go /preparationContent,/
.code recipy.go /range preparationContent.Blocks/,/this is empty/

## Nice, we can parse "slice". Now to boil.

## Boiling:

.code tartiflette.recipy.hcl /boil "potatoes/,/peel/

This is going to create a boiled_potatoes variable.

## Boiling:

.code tartiflette.recipy.hcl /boil "potatoes/,/peel/

.code recipy.go /preparationActionsSchema/,/"boil"/

## Boiling:

.code tartiflette.recipy.hcl /boil "potatoes/,/peel/

.code recipy.go /preparationActionsSchema/,/"boil"/

.code recipy.go /type Action struct/,/"duration"/

## Boiling:

.code recipy.go /range/
.code recipy.go /switch/,/gohcl.DecodeBody/
.code recipy.go /type Action struct/,/"duration"/

Here: 
* **`duration`** will be loaded into the duration field because of the struct tag.
a context, they could be warnings or errors (ex: "file.go:L32 something is not
right")
* **`gohcl`** deduces HCL schemas using hcl tags.

## Okay, now we need a way to stack these ingredients

## Stacking stuff :

.code tartiflette.recipy.hcl /stack/,/onions/

## Stacking stuff :

.code tartiflette.recipy.hcl /stack/,/in/
.code recipy.go /var stack struct {/,/}/
.code recipy.go /gohcl.DecodeBody\(stackBody/

Here, we partially decode our stack block, and put all other blocks in
stack.Rest.

## 'add'

.code tartiflette.recipy.hcl /add/,/}/
.code recipy.go /nestedStackContent/
.code recipy.go /nestedStackContent\.Blocks/

## 'add' schema

.code recipy.go /case "add/,/}\n/
.code recipy.go /hcldec.Decode/

* Schemas allow to define the layout of an object more explicitly.
* These can be sent over the network.
* All of these hcldec types define the hcldec.Spec interface

## Now, we know:

* how to open an HCL file
* how to extract blocks and attributes from a body

Now let's learn how to use variables and function.

## EvalContext allows to define variables and functions.

.code tartiflette.recipy.hcl /minutes/
.code recipy.go /var durationEvalCtx/,/}$/
.code recipy.go /durationEvalCtx,/

## To list variable references of a block

.code tartiflette.recipy.hcl /add/,/}/

## To list variable references of a block

.code tartiflette.recipy.hcl /add/,/}/
.code recipy.go /required by/,/split.RootName/

## Ouput:

```
$ ./recipy

expecting recipy version >= 1.0.0

To prepare a tartiflette:
* slice cheese
* boil potatoes during 30m0s 

Then stack in a cast iron pan

tartiflette requires: [boiled_potatoes sliced_cheese]
```

## Pro tips

* Write HCL mockups early to get a feeling.
* Decouple decoding from validation from execution.
* Define wether you will need a tree early. 
* gohcl from hcl/v2 seems to be the most imported

.image who_uses_what.png

`*` Nomad's old versions uses hcl v1
